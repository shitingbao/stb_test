// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.2
// source: api/flow/v1/flow.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Flow_CreateFlow_FullMethodName = "/api.flow.v1.Flow/CreateFlow"
	Flow_UpdateFlow_FullMethodName = "/api.flow.v1.Flow/UpdateFlow"
	Flow_DeleteFlow_FullMethodName = "/api.flow.v1.Flow/DeleteFlow"
	Flow_GetFlow_FullMethodName    = "/api.flow.v1.Flow/GetFlow"
	Flow_ListFlow_FullMethodName   = "/api.flow.v1.Flow/ListFlow"
)

// FlowClient is the client API for Flow service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FlowClient interface {
	CreateFlow(ctx context.Context, in *CreateFlowRequest, opts ...grpc.CallOption) (*CreateFlowReply, error)
	UpdateFlow(ctx context.Context, in *UpdateFlowRequest, opts ...grpc.CallOption) (*UpdateFlowReply, error)
	DeleteFlow(ctx context.Context, in *DeleteFlowRequest, opts ...grpc.CallOption) (*DeleteFlowReply, error)
	GetFlow(ctx context.Context, in *GetFlowRequest, opts ...grpc.CallOption) (*GetFlowReply, error)
	ListFlow(ctx context.Context, in *ListFlowRequest, opts ...grpc.CallOption) (*ListFlowReply, error)
}

type flowClient struct {
	cc grpc.ClientConnInterface
}

func NewFlowClient(cc grpc.ClientConnInterface) FlowClient {
	return &flowClient{cc}
}

func (c *flowClient) CreateFlow(ctx context.Context, in *CreateFlowRequest, opts ...grpc.CallOption) (*CreateFlowReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateFlowReply)
	err := c.cc.Invoke(ctx, Flow_CreateFlow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowClient) UpdateFlow(ctx context.Context, in *UpdateFlowRequest, opts ...grpc.CallOption) (*UpdateFlowReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateFlowReply)
	err := c.cc.Invoke(ctx, Flow_UpdateFlow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowClient) DeleteFlow(ctx context.Context, in *DeleteFlowRequest, opts ...grpc.CallOption) (*DeleteFlowReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteFlowReply)
	err := c.cc.Invoke(ctx, Flow_DeleteFlow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowClient) GetFlow(ctx context.Context, in *GetFlowRequest, opts ...grpc.CallOption) (*GetFlowReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFlowReply)
	err := c.cc.Invoke(ctx, Flow_GetFlow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowClient) ListFlow(ctx context.Context, in *ListFlowRequest, opts ...grpc.CallOption) (*ListFlowReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFlowReply)
	err := c.cc.Invoke(ctx, Flow_ListFlow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FlowServer is the server API for Flow service.
// All implementations must embed UnimplementedFlowServer
// for forward compatibility.
type FlowServer interface {
	CreateFlow(context.Context, *CreateFlowRequest) (*CreateFlowReply, error)
	UpdateFlow(context.Context, *UpdateFlowRequest) (*UpdateFlowReply, error)
	DeleteFlow(context.Context, *DeleteFlowRequest) (*DeleteFlowReply, error)
	GetFlow(context.Context, *GetFlowRequest) (*GetFlowReply, error)
	ListFlow(context.Context, *ListFlowRequest) (*ListFlowReply, error)
	mustEmbedUnimplementedFlowServer()
}

// UnimplementedFlowServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFlowServer struct{}

func (UnimplementedFlowServer) CreateFlow(context.Context, *CreateFlowRequest) (*CreateFlowReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFlow not implemented")
}
func (UnimplementedFlowServer) UpdateFlow(context.Context, *UpdateFlowRequest) (*UpdateFlowReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFlow not implemented")
}
func (UnimplementedFlowServer) DeleteFlow(context.Context, *DeleteFlowRequest) (*DeleteFlowReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFlow not implemented")
}
func (UnimplementedFlowServer) GetFlow(context.Context, *GetFlowRequest) (*GetFlowReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFlow not implemented")
}
func (UnimplementedFlowServer) ListFlow(context.Context, *ListFlowRequest) (*ListFlowReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFlow not implemented")
}
func (UnimplementedFlowServer) mustEmbedUnimplementedFlowServer() {}
func (UnimplementedFlowServer) testEmbeddedByValue()              {}

// UnsafeFlowServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FlowServer will
// result in compilation errors.
type UnsafeFlowServer interface {
	mustEmbedUnimplementedFlowServer()
}

func RegisterFlowServer(s grpc.ServiceRegistrar, srv FlowServer) {
	// If the following call pancis, it indicates UnimplementedFlowServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Flow_ServiceDesc, srv)
}

func _Flow_CreateFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowServer).CreateFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Flow_CreateFlow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowServer).CreateFlow(ctx, req.(*CreateFlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Flow_UpdateFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowServer).UpdateFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Flow_UpdateFlow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowServer).UpdateFlow(ctx, req.(*UpdateFlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Flow_DeleteFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowServer).DeleteFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Flow_DeleteFlow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowServer).DeleteFlow(ctx, req.(*DeleteFlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Flow_GetFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowServer).GetFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Flow_GetFlow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowServer).GetFlow(ctx, req.(*GetFlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Flow_ListFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowServer).ListFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Flow_ListFlow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowServer).ListFlow(ctx, req.(*ListFlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Flow_ServiceDesc is the grpc.ServiceDesc for Flow service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Flow_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.flow.v1.Flow",
	HandlerType: (*FlowServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFlow",
			Handler:    _Flow_CreateFlow_Handler,
		},
		{
			MethodName: "UpdateFlow",
			Handler:    _Flow_UpdateFlow_Handler,
		},
		{
			MethodName: "DeleteFlow",
			Handler:    _Flow_DeleteFlow_Handler,
		},
		{
			MethodName: "GetFlow",
			Handler:    _Flow_GetFlow_Handler,
		},
		{
			MethodName: "ListFlow",
			Handler:    _Flow_ListFlow_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/flow/v1/flow.proto",
}
